# SPDX-FileCopyrightText: 2024 Aleksandr Mezin <mezin.alexander@gmail.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later

project(
  'ddterm',
  version: '62',
  meson_version: '>= 1.3.0',
  license: 'GPL-3.0-or-later',
  license_files: 'LICENSE',
  default_options: ['prefix=/usr'],
)

fs = import('fs')
i18n = import('i18n')

uuid = 'ddterm@amezin.github.com'
gettext_domain = uuid
settings_schema = 'com.github.amezin.ddterm'

prefix = get_option('prefix')
bindir = prefix / get_option('bindir')
datadir = prefix / get_option('datadir')

extension_dir = datadir / 'gnome-shell' / 'extensions' / uuid
schema_dir = datadir / 'glib-2.0' / 'schemas'
applications_dir = datadir / 'applications'
dbus_service_dir = datadir / 'dbus-1' / 'services'

gjs_req = '>=1.78.0'
gnome_shell_req = ['>=45.0', '<50']
shell_versions = ['45', '46', '47', '48', '49']

summary('Target GNOME Shell version', gnome_shell_req, list_sep: ', ')

gjs_shebang = get_option('shebang_override')

gjs = find_program(
  'gjs',
  version: gjs_req,
  required: gjs_shebang == '',
  disabler: true,
)

if gjs_shebang == ''
  gjs_shebang = gjs.full_path()
endif

summary('Shebang line', gjs_shebang)

summary(
  {
    'prefix': prefix,
    'bindir': bindir,
    'extension_dir': extension_dir,
    'schema_dir': schema_dir,
    'applications_dir': applications_dir,
    'dbus_service_dir': dbus_service_dir,
  },
  section: 'System-wide installation',
)

# Meson's "capture: true" hides stderr output (warnings from gtk-builder-tool)
capture_stdout = ['sh', '-c', 'exec "$@" >"$0"', '@OUTPUT@']

gtk3_builder_tool = find_program('gtk-builder-tool')
gtk4_builder_tool = find_program('gtk4-builder-tool')
glib_compile_schemas_tool = find_program('glib-compile-schemas')
xsltproc = find_program('xsltproc')

xgettext = find_program('xgettext', required: false, disabler: true)

desktop_file_validate_tool = find_program(
  'desktop-file-validate',
  required: false,
  disabler: true,
)

gapplication_tool = find_program('gapplication', required: false, disabler: true)

extensions_tool = find_program(
  'gnome-extensions',
  required: get_option('tests').enabled(),
  disabler: true,
)

dbus_daemon = find_program(
  'dbus-daemon',
  required: get_option('tests').enabled(),
  disabler: true,
)

gnome_shell = find_program(
  'gnome-shell',
  version: gnome_shell_req,
  required: get_option('tests').enabled(),
  disabler: true,
)

git_revision_file = files('revision.txt.in')
git_revision_format = '%H'
git_revision_placeholder = f'$Format:@git_revision_format@$'

has_git_revision_placeholder = fs.read(git_revision_file).contains(
  git_revision_placeholder,
)

git = find_program('git', disabler: true, required: has_git_revision_placeholder)

if has_git_revision_placeholder
  git_revision_file = custom_target(
    command: [
      capture_stdout,
      git,
      '-C',
      '@CURRENT_SOURCE_DIR@',
      '--git-dir',
      '.git',
      'rev-list',
      f'--format=format:@git_revision_format@',
      '-1',
      '--no-commit-header',
      'HEAD',
    ],
    output: 'revision.txt',
    build_always_stale: true,
    install: true,
    install_dir: extension_dir,
  )
else
  git_revision_file = fs.copyfile(
    git_revision_file,
    'revision.txt',
    install: true,
    install_dir: extension_dir,
  )
endif

subdir('tools')

pack = [
  custom_target(
    command: [
      make_metadata_command,
      '--package-json',
      files('package.json'),
      '--name',
      meson.project_name(),
      '--version-name',
      meson.project_version(),
      '--git-revision-file',
      git_revision_file,
      f'--uuid=@uuid@',
      f'--gettext-domain=@gettext_domain@',
      f'--settings-schema=@settings_schema@',
      '--shell-version',
      shell_versions,
    ],
    output: 'metadata.json',
    install: true,
    install_dir: extension_dir,
  ),
  # Both are "licenses" for autogenerated files (no copyright), should be fine
  fs.copyfile('package-lock.json.license', 'metadata.json.license'),
  # Keep revision file in package to allow smooth upgrade (while old extension is loaded)
  git_revision_file,
  fs.copyfile('revision.txt.in.license', 'revision.txt.license'),
]

foreach f : ['extension.js', 'prefs.js', 'AUTHORS']
  pack += fs.copyfile(f, install: true, install_dir: extension_dir)
endforeach

subdir('bin')
subdir('data')
subdir('schemas')
subdir('ddterm')
subdir('locale')

pack += fs.copyfile('stylesheet.css', install: true, install_dir: extension_dir)

pack_from_srcdir = [
  'LICENSES' / 'GPL-3.0-or-later.txt',
  'LICENSES' / 'CC0-1.0.txt',
  'REUSE.toml',
]

pack_command = [make_zip_command]

foreach extra_path : pack_from_srcdir
  pack_command += ['--include', files(extra_path), extra_path]
endforeach

pack_target = custom_target(
  command: pack_command,
  input: pack,
  output: f'@uuid@.shell-extension.zip',
  build_by_default: true,
)

alias_target('pack', pack_target)
summary('Built package location', pack_target.full_path())

meson.add_devenv({'DDTERM_BUILT_PACK': pack_target.full_path()})

run_target(
  'user-install',
  command: [extensions_tool, 'install', '-f', pack_target],
)

run_target('user-uninstall', command: [extensions_tool, 'uninstall', uuid])

foreach action : ['prefs', 'enable', 'disable', 'reset']
  run_target(action, command: [extensions_tool, action, uuid])
endforeach

foreach action : ['toggle', 'quit']
  run_target(
    action,
    command: [gapplication_tool, 'action', 'com.github.amezin.ddterm', action],
  )
endforeach

run_target(
  'nested-wayland-shell',
  command: [run_gnome_shell_wayland_nested_command, pack_target],
)

run_target(
  'xephyr-x11-shell',
  command: [run_gnome_shell_xephyr_x11_command, pack_target],
)

toxinidir = meson.current_source_dir()
toxworkdir = toxinidir / '.tox'

subdir('tests')
