# SPDX-FileCopyrightText: 2022 Aleksandr Mezin <mezin.alexander@gmail.com>
#
# SPDX-License-Identifier: CC0-1.0

[tox]
minversion = 4.0
skipsdist = true
envlist =
    eslint
    markdownlint
    flake8
    reuse
    version
    meson-test
    reuse-pack

[testenv]
passenv =
    FORCE_COLOR
    GITHUB_ACTIONS
    PIP_DISABLE_PIP_VERSION_CHECK
    DDTERM_BUILT_PACK

suicide_timeout = 15
interrupt_timeout = 15
terminate_timeout = 15

[testenv:pip-compile]
description = Lock Python dependencies
deps = -r requirements/pip-compile.txt
changedir = {toxinidir}/requirements
commands =
    {envpython} -m piptools compile --strip-extras {posargs} test.in
    {envpython} -m piptools compile --strip-extras {posargs} test-images.in
    {envpython} -m piptools compile --strip-extras {posargs} flake8.in
    {envpython} -m piptools compile --strip-extras {posargs} reuse.in
    {envpython} -m piptools compile --strip-extras {posargs} meson.in
    {envpython} -m piptools compile --strip-extras {posargs} version.in
    {envpython} -m piptools compile --strip-extras {posargs} pip-compile.in

[testenv:pytest]
description = Run tests using pytest (advanced)
deps = -r tests/requirements.txt

# https://github.com/pytest-dev/pytest/issues/10451
commands_pre = rm -f '{envsitepackagesdir}/py.py'
allowlist_externals = rm

commands = {envpython} -m pytest --html=tests/report.html --dist=worksteal {posargs}

[testenv:meson{,-test}]
description =
    Build
    test: and test
    package using Meson

base =
    test: testenv:pytest

deps =
    -r requirements/meson.txt
    test: {[testenv:pytest]deps}

changedir = {toxinidir}/build

commands_pre =
    test: {[testenv:pytest]commands_pre}
    {envpython} -m mesonbuild.mesonmain setup --reconfigure {env:CONFIGURE_FLAGS} {toxinidir}

commands =
    test: {envpython} -m mesonbuild.mesonmain {posargs:test}
    !test: {envpython} -m mesonbuild.mesonmain {posargs:compile}

setenv =
    test: CONFIGURE_FLAGS=${env:CONFIGURE_FLAGS:-Dtests=enabled}
    !test: CONFIGURE_FLAGS=${env:CONFIGURE_FLAGS:-Dtests=disabled}

passenv =
    DISPLAY
    XAUTHORITY
    TQDM_*

[testenv:test]
description =
    Test the package using pytest. It needs to be built by running meson before

base = testenv:pytest

depends =
    meson

setenv =
    DDTERM_BUILT_PACK={env:DDTERM_BUILT_PACK:{toxinidir}/build/ddterm@amezin.github.com.shell-extension.zip}

[testenv:images]
description = Manage container images for pytest
deps = -r requirements/test-images.txt
commands = {envpython} tests/images.py {posargs: pull}

[testenv:flake8]
description = Check Python source code using flake8
deps = -r requirements/flake8.txt
commands = {envpython} -m flake8 {posargs}
labels = lint

[testenv:reuse]
description = Check source code for REUSE compliance
deps = -r requirements/reuse.txt
commands = {envpython} -m reuse {posargs: lint}
labels = lint

[testenv:reuse-pack]
description = Check generated package for REUSE compliance
deps = -r requirements/reuse.txt
depends = meson
changedir = {env_tmp_dir}
commands =
    {envpython} -m zipfile --extract {posargs:{env:DDTERM_BUILT_PACK}} .
    {envpython} -m reuse --root . lint

setenv =
    DDTERM_BUILT_PACK={env:DDTERM_BUILT_PACK:{toxinidir}/build/ddterm@amezin.github.com.shell-extension.zip}

[testenv:meson-format]
description = Check formatting of meson.build files
deps = -r requirements/meson.txt
commands = {envpython} -m mesonbuild.mesonmain format -e {posargs: -r -q}
labels = lint

[testenv:eslint]
description = Check JavaScript source code using ESLint
deps =
allowlist_externals = npm
commands_pre = npm install
commands = npm run-script lint:eslint -- {posargs}
labels = lint

[testenv:markdownlint]
description = Check Markdown files
deps =
allowlist_externals = npm
commands_pre = npm install
commands = npm run-script lint:markdownlint -- {posargs}
labels = lint

[testenv:version]
description = Manage version number
deps = -r requirements/version.txt
commands = {envpython} -m bumpversion {posargs: bump --dry-run --allow-dirty major}
