# SPDX-FileCopyrightText: 2025 Aleksandr Mezin <mezin.alexander@gmail.com>
#
# SPDX-License-Identifier: CC0-1.0

name: ci

on:
  workflow_call:
    inputs:
      push:
        type: boolean
        description: Push autogenerated changes
        default: false
    outputs:
      pages:
        description: Whether pages were generated successfully
        value: ${{ jobs.pages.result == 'success' }}

defaults:
  run:
    shell: bash

permissions:
  contents: read

env:
  FORCE_COLOR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  VIRTUALENV_SYSTEM_SITE_PACKAGES: 'true'
  TERM: xterm-color
  TQDM_DISABLE: 1
  DEVTOOLS_COLOR: always

jobs:
  plan:
    runs-on: ubuntu-24.04
    timeout-minutes: 5

    outputs:
      need-tests: ${{ steps.test-config.outcome == 'success' }}
      testspace: ${{ steps.test-config.outcome == 'success' && !github.event.repository.fork }}
      test-containers: ${{ steps.test-config.outputs.containers || '[]' }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - id: diff
        name: Check if tests are necessary
        uses: amezin/compare-commit-files-action@3838049371230a8af6e21d79a266c2521185d1a6 # v1.0.0
        continue-on-error: true
        with:
          files: |
            !**/*.md
            !**/*.license
            !**/REUSE.toml
            !**/.*
            !**/eslint.config.*
            !LICENSES/**
            !po/**
            !docs/**
            !lint/**
            !.github/ISSUE_TEMPLATE/**
            !.github/release.yml
            !do-in-*.sh
            !Vagrantfile
            !package.json
            !package-lock.json
            !meson.format
            !LICENSE
            !renovate.json

      - id: test-config
        name: Determine test configurations
        if: ${{ steps.diff.outputs.changed != 'false' }}
        working-directory: tests
        run: >-
          docker compose config --services | grep -v archlinux | jq -cnR '[inputs]' | sed -e "s/^/containers=/" >>"$GITHUB_OUTPUT"

  lint:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    container:
      image: ghcr.io/ddterm/ci-docker-image:2025.06.10.1

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - run: git config --global --replace-all safe.directory "$GITHUB_WORKSPACE"

      - name: Install development dependencies from npm
        id: npm
        uses: ./.github/actions/npm-install
        if: ${{ always() && steps.checkout.outcome == 'success' }}

      - name: Install Python dependencies
        id: pip
        uses: ./.github/actions/tox-preinstall
        with:
          environments: reuse,version,flake8,meson-format,pip-compile
        if: ${{ always() && steps.checkout.outcome == 'success' }}

      - name: Lint JS code with ESLint
        uses: ./.github/actions/eslint
        if: ${{ always() && steps.npm.outcome == 'success' }}

      - name: Lint Python code with flake8
        uses: ./.github/actions/flake8
        if: ${{ always() && steps.pip.outcome == 'success' }}

      - name: Lint Markdown files
        uses: ./.github/actions/markdownlint
        if: ${{ always() && steps.npm.outcome == 'success' }}

      - name: Check repository REUSE compliance
        uses: ./.github/actions/reuse
        if: ${{ always() && steps.pip.outcome == 'success' }}

      - name: Check meson.build formatting
        uses: ./.github/actions/meson-format
        if: ${{ always() && steps.pip.outcome == 'success' }}

      - name: Check Python requirements .txt files
        uses: ./.github/actions/pip-compile
        if: ${{ always() && steps.pip.outcome == 'success' }}

      - name: Check version number
        run: tox -e version
        if: ${{ always() && steps.pip.outcome == 'success' }}

      - name: Check PICT test cases
        uses: ./.github/actions/pict
        if: ${{ always() && steps.checkout.outcome == 'success' }}

  extension-package:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    container:
      image: ghcr.io/ddterm/ci-docker-image:2025.06.10.1

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - run: git config --global --replace-all safe.directory "$GITHUB_WORKSPACE"

      - name: Install meson
        uses: ./.github/actions/setup-meson

      - name: Prepare build directory
        run: meson setup '-Dshebang_override=/usr/bin/env gjs' '-Dtests=disabled' build
        shell: pipetty bash -e {0}

      - name: Build extension package
        id: pack
        run: xvfb-run -d --server-args=-noreset --wait=0 -- ninja -j1 pack
        working-directory: build

      - name: Upload extension package as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ github.job }}
          path: "build/*.shell-extension.zip"
          if-no-files-found: error
        if: ${{ always() && steps.pack.outcome == 'success' }}

      - name: Run checks
        run: xvfb-run -d --server-args=-noreset --wait=0 -- meson test -v -j1
        working-directory: build
        shell: pipetty bash -e {0}
        if: ${{ always() && steps.pack.outcome == 'success' }}

      - name: Check REUSE compliance of generated package
        run: tox --sitepackages -e reuse-pack -- build/*.shell-extension.zip
        if: ${{ always() && steps.pack.outcome == 'success' }}

  update-translations:
    needs:
      - lint
      - extension-package

    runs-on: ubuntu-24.04
    timeout-minutes: 5
    container:
      image: ghcr.io/ddterm/ci-docker-image:2025.06.10.1

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - run: git config --global --replace-all safe.directory "$GITHUB_WORKSPACE"

      - name: Install meson
        uses: ./.github/actions/setup-meson

      - name: Prepare build directory
        id: setup
        run: meson setup '-Dtests=disabled' build
        shell: pipetty bash -e {0}

      - name: Update POTFILES.in
        run: ninja -j1 potfiles
        working-directory: build

      - name: Update .pot file
        run: ninja -j1 pot && ninja -j1 pot-set-year
        working-directory: build

      - name: Update .po files
        run: for pofile in ./*.po; do msgmerge --no-wrap --update --previous "$pofile" ./*.pot; done
        working-directory: po

      - name: Diff
        id: diff
        # Note: git diff --name-only ignores --ignore-matching-lines arg
        run: |
          git diff --color '--ignore-matching-lines=^"POT-Creation-Date: ' 'po/*.po' 'po/*.pot' 'po/POTFILES.in' | tee "$RUNNER_TEMP/po.diff"
          echo "size=$(stat --printf=%s "$RUNNER_TEMP/po.diff")" >>"$GITHUB_OUTPUT"

      - name: Create pull request
        if: vars.APP_ID && fromJSON(steps.diff.outputs.size) && github.secret_source == 'Actions' && inputs.push
        uses: ./.github/actions/pull-request
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_KEY }}
          title: 'translations: update translation files'
          description: 'Update translation files. Before merging this, make sure there are no unmerged changes from Weblate.'
          files: |
            po/*.po
            po/*.pot
            po/POTFILES.in

  test:
    needs:
      - plan
      - extension-package
      - lint

    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJSON(needs.plan.outputs.test-containers) }}

    if: fromJSON(needs.plan.outputs.need-tests)
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    container:
      image: ghcr.io/ddterm/ci-docker-image:2025.06.10.1
      options: --init --privileged --tmpfs /run -v /tmp:/tmp --cgroupns=host

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - run: git config --global --replace-all safe.directory "$GITHUB_WORKSPACE"

      - name: Download extension package
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: extension-package

      - name: Install dependencies
        uses: ./.github/actions/tox-preinstall
        with:
          environments: pytest,images

      - name: Run tests
        uses: ./.github/actions/container-test
        with:
          container: ${{ matrix.container }}
          testspace: ${{ needs.plan.outputs.testspace }}
          args: >-
            ${{ !contains(matrix.container, 'alpine') && '--journald' || '' }}
            --package=ddterm@amezin.github.com.shell-extension.zip

  archlinux-package:
    needs:
      - plan
      - extension-package
      - lint

    runs-on: ubuntu-24.04
    timeout-minutes: 10
    container:
      image: ghcr.io/archlinux/archlinux:base-devel@sha256:12fa7017e949072e5dfa0fa9dca2ee15cce803e65ddd7e2f01a6b22233cd21ed
      options: --privileged --tmpfs /run

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0  # for pkgver()

      - name: Create build chroot
        uses: ./.github/actions/mkarchroot

      - name: Build package
        uses: ./.github/actions/makechrootpkg
        with:
          makepkg-args: --nocheck

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ github.job }}
          path: |
            *.pkg.tar.*
            *.log
          if-no-files-found: error

      - id: pkgfilename
        run: echo "pkgfilename=$(echo -n *.pkg.tar@(|.+([^.])))" >>"$GITHUB_OUTPUT"
        shell: bash -e -O extglob {0}

    outputs:
      pkgfilename: ${{ steps.pkgfilename.outputs.pkgfilename }}

  archlinux-installed-test:
    needs:
      - plan
      - archlinux-package

    if: fromJSON(needs.plan.outputs.need-tests)
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    container:
      image: ghcr.io/ddterm/ci-docker-image:2025.06.10.1
      options: --init --privileged --tmpfs /run -v /tmp:/tmp --cgroupns=host

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - run: git config --global --replace-all safe.directory "$GITHUB_WORKSPACE"

      - name: Download extension package
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: archlinux-package

      - name: Install dependencies
        uses: ./.github/actions/tox-preinstall
        with:
          environments: pytest,images

      - name: Run tests
        uses: ./.github/actions/container-test
        with:
          container: archlinux
          testspace: ${{ needs.plan.outputs.testspace }}
          args: --journald "--sys-package=$PKGFILENAME"
        env:
          PKGFILENAME: ${{ needs.archlinux-package.outputs.pkgfilename }}

  archlinux-package-check:
    needs:
      - plan
      - archlinux-package

    if: fromJSON(needs.plan.outputs.need-tests)
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    container:
      image: ghcr.io/archlinux/archlinux:base-devel@sha256:12fa7017e949072e5dfa0fa9dca2ee15cce803e65ddd7e2f01a6b22233cd21ed
      options: --privileged --tmpfs /run

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0  # for pkgver()

      - name: Create build chroot
        uses: ./.github/actions/mkarchroot

      - name: Build package
        uses: ./.github/actions/makechrootpkg
        with:
          makepkg-args: --check

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ github.job }}
          path: |
            *.pkg.tar.*
            *.log
          if-no-files-found: error

  pages:
    needs:
      - extension-package
      - test
      - archlinux-package
      - archlinux-package-check
      - archlinux-installed-test

    if: always() && needs.extension-package.result == 'success'
    runs-on: ubuntu-24.04
    timeout-minutes: 5

    permissions:
      contents: read

    steps:
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: extension-package

      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: archlinux-package
        continue-on-error: true

      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: archlinux-package-check
        continue-on-error: true

      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: '*-reports'
          merge-multiple: false
        continue-on-error: true

      - uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          path: .
