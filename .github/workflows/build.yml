on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Override git ref'
        type: string
        default: ''
        required: false
      testspace:
        description: 'Publish report to Testspace'
        type: boolean
        default: false
        required: false
  workflow_call:
    inputs:
      ref:
        description: 'Override git ref'
        type: string
        default: ''
        required: false
      testspace:
        description: 'Publish report to Testspace'
        type: boolean
        default: false
        required: false

env:
  FORCE_COLOR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ddterm/ci-docker-image:2024.01.21.0

    steps:
    - name: Checkout
      id: checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}

    - run: git config --global --replace-all safe.directory "$GITHUB_WORKSPACE"

    - name: Setup Testspace
      id: setup_testspace
      uses: testspace-com/setup-testspace@v1
      with:
        domain: ${{ github.repository_owner }}
      continue-on-error: true
      if: ${{ inputs.testspace }}

    - name: Install JS dependencies
      id: npm
      run: npm ci
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Enable eslint error matcher
      run: echo "::add-matcher::.github/problem-matchers/eslint-stylish.json"
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Lint JS code
      run: make "ESLINT_OPTS=--format .github/eslint-formatter.js" lint
      if: ${{ always() && steps.npm.conclusion == 'success' }}
      env:
        FORCE_COLOR: 0

    - name: Disable eslint error matcher
      run: echo "::remove-matcher owner=eslint-stylish::"
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Pre-create pip cache directory
      run: mkdir -p "$HOME/.cache/pip"
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Enable flake8 error matcher
      run: echo "::add-matcher::.github/problem-matchers/flake8.json"
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Lint Python test code
      run: tox --sitepackages -e lint 2>&1 | sed -e 's:^\./:test/:' | tee ../flake8.log
      env:
        FORCE_COLOR: 0
      if: ${{ always() && steps.checkout.conclusion == 'success' }}
      working-directory: test

    - name: Disable flake8 error matcher
      run: echo "::remove-matcher owner=flake8::"
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Enable generic error matcher
      run: echo "::add-matcher::.github/problem-matchers/generic.json"
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Compile GSettings schemas
      run: make schemas 2>&1 | tee schemas.log
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Validate .desktop file
      run: make desktop-file-validate 2>&1 | tee desktop-file.log
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Validate Gtk .ui files
      run: xvfb-run make gtk-builder-validate 2>&1 | tee gtk-builder.log
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Ensure Python requirements .txt files are in sync with .in files
      run: |
        tox --sitepackages -e pip-compile
        if ! git diff --exit-code --color=always -- requirements
        then
          echo "::error:: Python dependencies lock files are out of date"
          echo "::error:: Please run test/requirements/pip-compile.sh"
          exit 1
        fi
      if: ${{ always() && steps.checkout.conclusion == 'success' }}
      working-directory: test

    - name: Ensure Python version in renovate.json matches CI Docker image
      run: .github/renovate-python-constraint.py
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Upload reports to Testspace
      run: testspace --verbose eslint.xml "*.log{lint}"
      if: ${{ always() && steps.setup_testspace.outcome == 'success' }}

    - name: Build extension package
      id: pack
      run: xvfb-run make pack
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Upload extension package as artifact
      id: upload
      uses: actions/upload-artifact@v4
      with:
        name: pack
        path: "*.shell-extension.zip"
        if-no-files-found: error
      if: ${{ always() && steps.pack.conclusion == 'success' }}
