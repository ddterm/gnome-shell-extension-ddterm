# SPDX-FileCopyrightText: 2022 Aleksandr Mezin <mezin.alexander@gmail.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later

on:
  workflow_dispatch:
    inputs:
      testspace:
        description: 'Publish report to Testspace'
        type: boolean
        default: false
        required: false
  workflow_call:
    inputs:
      testspace:
        description: 'Publish report to Testspace'
        type: boolean
        default: false
        required: false

env:
  FORCE_COLOR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  TERM: xterm-color

defaults:
  run:
    shell: bash

jobs:
  lint:
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/ddterm/ci-docker-image:2024.11.17.0

    steps:
    - name: Checkout
      id: checkout
      uses: actions/checkout@v4

    - run: git config --global --replace-all safe.directory "$GITHUB_WORKSPACE"

    - name: Setup Testspace
      id: setup_testspace
      uses: testspace-com/setup-testspace@v1
      with:
        domain: ${{ github.repository_owner }}
      continue-on-error: true
      if: ${{ inputs.testspace }}

    - name: Pre-create pip cache directory
      run: mkdir -p "$HOME/.cache/pip"
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Check REUSE compliance
      run: tox --sitepackages -e reuse
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Check version number
      run: tox --sitepackages -e version
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Install JS dependencies
      id: npm
      run: npm install
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Enable eslint error matcher
      id: enable_eslint_errors
      uses: ./.github/actions/eslint-stylish-problem-matcher
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Lint JS code
      run: npm run-script lint:eslint -- --format .github/eslint-formatter.js
      env:
        FORCE_COLOR: 0
      if: ${{ always() && steps.npm.conclusion == 'success' }}

    - name: Disable eslint error matcher
      uses: ./.github/actions/eslint-stylish-problem-matcher
      with:
        enable: false
      if: ${{ always() && steps.enable_eslint_errors.outcome == 'success' }}

    - name: Enable flake8 error matcher
      id: enable_flake8_errors
      uses: ./.github/actions/flake8-problem-matcher
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Lint Python test code
      run: tox --sitepackages -e flake8 -- --tee --output-file flake8.log 2>&1
      env:
        FORCE_COLOR: 0
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Disable flake8 error matcher
      uses: ./.github/actions/flake8-problem-matcher
      with:
        enable: false
      if: ${{ always() && steps.enable_flake8_errors.outcome == 'success' }}

    - name: Check meson.build formatting
      run: |
        meson format -r -i
        if ! git diff --exit-code --color=always
        then
          echo "::error:: meson.build formatting is incorrect"
          echo "::error:: Please run meson format -e -r -i"
          exit 1
        fi
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Ensure Python requirements .txt files are in sync with .in files
      run: |
        tox --sitepackages -e pip-compile
        if ! git diff --exit-code --color=always -- requirements
        then
          echo "::error:: Python dependencies lock files are out of date"
          echo "::error:: Please run requirements/pip-compile.sh"
          exit 1
        fi
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Ensure PICT test cases are up to date
      run: |
        make
        if ! git diff --exit-code --color=always -- .
        then
          echo "::error:: PICT test cases are out of sync with models"
          echo "::error:: Please run tests/pict/gen.sh"
          exit 1
        fi
      working-directory: tests/pict

    - name: Upload reports to Testspace
      run: testspace --verbose eslint.xml "*.log{lint}"
      if: ${{ always() && steps.setup_testspace.outcome == 'success' }}

  build:
    needs:
      - lint

    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact: pack
            flags: '-Desm=true'
          - artifact: pack-legacy
            flags: '-Desm=false'

    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/ddterm/ci-docker-image:2024.11.17.0

    steps:
    - name: Checkout
      id: checkout
      uses: actions/checkout@v4

    - run: git config --global --replace-all safe.directory "$GITHUB_WORKSPACE"

    - name: Setup Testspace
      id: setup_testspace
      uses: testspace-com/setup-testspace@v1
      with:
        domain: ${{ github.repository_owner }}
      continue-on-error: true
      if: ${{ inputs.testspace }}

    - name: Enable generic error matcher
      id: enable_generic_errors
      uses: ./.github/actions/generic-problem-matcher

    - name: Install JS dependencies
      id: npm
      run: npm install

    - name: Pre-create pip cache directory
      run: mkdir -p "$HOME/.cache/pip"
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Install Python dependencies
      run: tox --notest --sitepackages -e reuse
      if: ${{ always() && steps.checkout.conclusion == 'success' }}

    - name: Prepare build directory
      run: .github/faketty.sh meson setup ${{ matrix.flags }} '-Dshebang_override=/usr/bin/env gjs' '-Dtests=disabled' build

    - name: Build extension package
      id: pack
      run: >-
        xvfb-run -d --server-args=-noreset --wait=0 --
        ninja -j1 pack
      working-directory: build

    - name: Upload extension package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: "build/*.shell-extension.zip"
        if-no-files-found: error

    - name: Run checks
      run: >-
        xvfb-run -d --server-args=-noreset --wait=0 --
        ../.github/faketty.sh meson test -v -j1 --logbase ${{ matrix.artifact }} --no-suite lint-source --no-suite eslint --no-suite reuse
      working-directory: build
      if: ${{ always() && steps.pack.conclusion == 'success' }}

    - name: Disable generic error matcher
      uses: ./.github/actions/generic-problem-matcher
      with:
        enable: false
      if: ${{ always() && steps.enable_generic_errors.outcome == 'success' }}

    - name: Enable eslint error matcher
      id: enable_eslint_errors
      uses: ./.github/actions/eslint-stylish-problem-matcher
      if: ${{ always() && steps.pack.conclusion == 'success' }}

    - name: Run eslint on generated code
      run: ../.github/faketty.sh meson test -v -j1 --logbase eslint-${{ matrix.artifact }} eslint-output
      working-directory: build
      if: ${{ always() && steps.pack.conclusion == 'success' }}

    - name: Disable eslint error matcher
      uses: ./.github/actions/eslint-stylish-problem-matcher
      with:
        enable: false
      if: ${{ always() && steps.enable_eslint_errors.outcome == 'success' }}

    - name: Check REUSE compliance of generated package
      run: ../.github/faketty.sh meson test -v -j1 --no-rebuild reuse-lint-output
      working-directory: build
      if: ${{ always() && steps.pack.conclusion == 'success' }}

    - name: Upload reports to Testspace
      run: testspace --verbose "build/meson-logs/*${{ matrix.artifact }}.txt{lint}"
      if: ${{ always() && steps.setup_testspace.outcome == 'success' }}
